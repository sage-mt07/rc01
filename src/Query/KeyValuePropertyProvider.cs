using Kafka.Ksql.Linq;
using Kafka.Ksql.Linq.Application;
using Kafka.Ksql.Linq.Query.Abstractions;
using Kafka.Ksql.Linq.Core.Models;
using System;
using System.Linq;
using System.Reflection;

namespace Kafka.Ksql.Linq.Query;

/// <summary>
/// Default implementation of <see cref="IKeyValuePropertyProvider"/> that
/// retrieves metadata from <see cref="KsqlContext"/>.
/// </summary>
public class KsqlContextPropertyProvider : IKeyValuePropertyProvider
{
    private readonly KsqlContext _context;

    public KsqlContextPropertyProvider(KsqlContext context)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
    }

    public PropertyMeta[] GetKeyProperties(Type pocoType)
    {
        var schema = _context.GetQuerySchema(pocoType);
        if (schema == null || schema.KeyProperties.Length == 0)
        {
            return new[] { PropertyMeta.AutoGenerated("Id") };
        }
        return schema.KeyProperties;
    }

    public PropertyMeta[] GetValueProperties(Type pocoType)
    {
        var schema = _context.GetQuerySchema(pocoType);
        if (schema == null)
        {
            return pocoType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Select(p => PropertyMeta.FromProperty(p))
                .ToArray();
        }
        return schema.ValueProperties;
    }
}
